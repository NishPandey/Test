import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.cert.*;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

public class FileEncryptor {

    public static void main(String[] args) throws Exception {
        String filePath = "/lotus/ds5/ETL/";
        String dataFile = "auto_papl.csv";
        String pubCertPath = "/lotus/ds1/home/dsadm/ds_cert1/public.pem";

        // Step 1: Generate 32-byte AES key
        byte[] aesKey = new byte[32];
        SecureRandom secureRandom = new SecureRandom();
        secureRandom.nextBytes(aesKey);

        // Step 2: IV = first 16 bytes of key
        byte[] ivBytes = new byte[16];
        System.arraycopy(aesKey, 0, ivBytes, 0, 16);

        // Step 3: Encrypt file using AES-256-CBC
        encryptFileAES(filePath + dataFile, filePath + dataFile + ".enc", aesKey, ivBytes);

        // Step 4: Encrypt AES key using RSA public certificate
        PublicKey publicKey = loadPublicKeyFromPEM(pubCertPath);
        byte[] encryptedKey = encryptRSA(aesKey, publicKey);

        Files.write(Paths.get(filePath + dataFile + ".key.enc"), encryptedKey);
    }

    private static void encryptFileAES(String inputFile, String outputFile, byte[] key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ivSpec);

        try (FileInputStream fis = new FileInputStream(inputFile);
             FileOutputStream fos = new FileOutputStream(outputFile);
             CipherOutputStream cos = new CipherOutputStream(fos, cipher)) {
            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                cos.write(buffer, 0, bytesRead);
            }
        }
    }

    private static PublicKey loadPublicKeyFromPEM(String pemPath) throws Exception {
        String pem = new String(Files.readAllBytes(Paths.get(pemPath)));
        String publicKeyPEM = pem.replace("-----BEGIN PUBLIC KEY-----", "")
                                 .replace("-----END PUBLIC KEY-----", "")
                                 .replaceAll("\\s", "");

        byte[] decoded = Base64.getDecoder().decode(publicKeyPEM);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(decoded);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePublic(spec);
    }

    private static byte[] encryptRSA(byte[] data, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }
}










decryption......





import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class FileDecryptor {

    public static void main(String[] args) throws Exception {
        String dataFilePath = "/lotus/ds5/ETL/";
        String encryptedFileName = "auto_papl.csv.enc";
        String keyEncFile = dataFilePath + "auto_papl.csv.key.enc";
        String privKeyPath = "/lotus/ds1/home/dsadm/ds_cert1/private.pem";

        String baseFileName = encryptedFileName.replace(".enc", "");
        String keyDecFile = dataFilePath + baseFileName + ".key.dec";
        String decryptedFile = dataFilePath + baseFileName + ".dec";

        // Step 1: Load private key
        PrivateKey privateKey = loadPrivateKeyFromPEM(privKeyPath);

        // Step 2: Decrypt AES key
        byte[] encryptedKey = Files.readAllBytes(Paths.get(keyEncFile));
        byte[] decryptedKey = decryptRSA(encryptedKey, privateKey);
        Files.write(Paths.get(keyDecFile), decryptedKey);

        // Step 3: Extract IV (first 16 bytes)
        byte[] iv = new byte[16];
        System.arraycopy(decryptedKey, 0, iv, 0, 16);

        // Step 4: Decrypt the file
        decryptFileAES(dataFilePath + encryptedFileName, decryptedFile, decryptedKey, iv);
    }

    private static void decryptFileAES(String encryptedFile, String outputFile, byte[] key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);

        try (FileInputStream fis = new FileInputStream(encryptedFile);
             CipherInputStream cis = new CipherInputStream(fis, cipher);
             FileOutputStream fos = new FileOutputStream(outputFile)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = cis.read(buffer)) != -1) {
                fos.write(buffer, 0, bytesRead);
            }
        }
    }

    private static PrivateKey loadPrivateKeyFromPEM(String pemPath) throws Exception {
        String pem = new String(Files.readAllBytes(Paths.get(pemPath)));
        String privateKeyPEM = pem.replace("-----BEGIN PRIVATE KEY-----", "")
                                  .replace("-----END PRIVATE KEY-----", "")
                                  .replaceAll("\\s", "");

        byte[] decoded = Base64.getDecoder().decode(privateKeyPEM);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decoded);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePrivate(keySpec);
    }

    private static byte[] decryptRSA(byte[] encryptedData, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(encryptedData);
    }
}




enhance. encrypt.......




package com.ibm.sbi.lotus.cloudant.loginandreg.core;

import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;

public class ShellTest {

    public static void main(String[] args) {
        try {
            // === INPUTS ===
            String inputFilePath = "C:/Users/v1017614/Downloads/month.csv";  // Replace with actual path
            String publicKeyPath = "C:/Users/v1017614/Downloads/public.pem";           // Replace with actual path
            String outputDir = "C:/Users/v1017614/Downloads/";                  // Folder to store output files

            // === FILENAMES ===
            String baseName = new File(inputFilePath).getName();
            String encryptedFile = outputDir + baseName + ".enc";
            String encryptedKeyFile = outputDir + baseName + ".key.enc";

            // === STEP 1: Generate AES-256 Key ===
            byte[] aesKey = new byte[32];
            SecureRandom random = new SecureRandom();
            random.nextBytes(aesKey);

            // === STEP 2: Extract IV from first 16 bytes ===
            byte[] iv = Arrays.copyOfRange(aesKey, 0, 16);

            // === STEP 3: Encrypt the file ===
            encryptFile(inputFilePath, encryptedFile, aesKey, iv);

            // === STEP 4: Encrypt AES key with public key ===
            PublicKey publicKey = loadPublicKeyFromPEM(publicKeyPath);
            byte[] encryptedKey = encryptAESKeyWithRSA(aesKey, publicKey);
            Files.write(Paths.get(encryptedKeyFile), encryptedKey);
            
            System.out.println("âœ… File encrypted: " + encryptedFile);
            System.out.println("ðŸ”‘ Key encrypted: " + encryptedKeyFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void encryptFile(String inputPath, String outputPath, byte[] aesKey, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec keySpec = new SecretKeySpec(aesKey, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);

        try (FileInputStream fis = new FileInputStream(inputPath);
             FileOutputStream fos = new FileOutputStream(outputPath);
             CipherOutputStream cos = new CipherOutputStream(fos, cipher)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                cos.write(buffer, 0, bytesRead);
            }
        }
    }

    private static PublicKey loadPublicKeyFromPEM(String pemFilePath) throws Exception {
        String pem = new String(Files.readAllBytes(Paths.get(pemFilePath)));
        String cleanPem = pem
                .replace("-----BEGIN PUBLIC KEY-----", "")
                .replace("-----END PUBLIC KEY-----", "")
                .replaceAll("\\s", "");
        byte[] decoded = Base64.getDecoder().decode(cleanPem);
        X509EncodedKeySpec spec = new X509EncodedKeySpec(decoded);
        return KeyFactory.getInstance("RSA").generatePublic(spec);
    }

    private static byte[] encryptAESKeyWithRSA(byte[] aesKey, PublicKey publicKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(aesKey);
    }
}






enhance decrypt.....





import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class FileDecryptor {

    public static void main(String[] args) throws Exception {
        String dataFilePath = "/lotus/ds5/ETL/";
        String encryptedFileName = "auto_papl.csv.enc";
        String keyEncFile = dataFilePath + "auto_papl.csv.key.enc";
        String privKeyPath = "/lotus/ds1/home/dsadm/ds_cert1/private.pem";

        String baseFileName = encryptedFileName.replace(".enc", "");
        String keyDecFile = dataFilePath + baseFileName + ".key.dec";
        String decryptedFile = dataFilePath + baseFileName + ".dec";

        // Step 1: Load private key
        PrivateKey privateKey = loadPrivateKeyFromPEM(privKeyPath);

        // Step 2: Decrypt AES key
        byte[] encryptedKey = Files.readAllBytes(Paths.get(keyEncFile));
        byte[] decryptedKey = decryptRSA(encryptedKey, privateKey);
        Files.write(Paths.get(keyDecFile), decryptedKey);

        // Step 3: Extract IV (first 16 bytes)
        byte[] iv = new byte[16];
        System.arraycopy(decryptedKey, 0, iv, 0, 16);

        // Step 4: Decrypt the file
        decryptFileAES(dataFilePath + encryptedFileName, decryptedFile, decryptedKey, iv);
    }

    private static void decryptFileAES(String encryptedFile, String outputFile, byte[] key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec secretKey = new SecretKeySpec(key, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ivSpec);

        try (FileInputStream fis = new FileInputStream(encryptedFile);
             CipherInputStream cis = new CipherInputStream(fis, cipher);
             FileOutputStream fos = new FileOutputStream(outputFile)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = cis.read(buffer)) != -1) {
                fos.write(buffer, 0, bytesRead);
            }
        }
    }

    private static PrivateKey loadPrivateKeyFromPEM(String pemPath) throws Exception {
        String pem = new String(Files.readAllBytes(Paths.get(pemPath)));
        String privateKeyPEM = pem.replace("-----BEGIN PRIVATE KEY-----", "")
                                  .replace("-----END PRIVATE KEY-----", "")
                                  .replaceAll("\\s", "");

        byte[] decoded = Base64.getDecoder().decode(privateKeyPEM);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decoded);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePrivate(keySpec);
    }

    private static byte[] decryptRSA(byte[] encryptedData, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(encryptedData);
    }
}





decrpt enhance... user input




import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.Scanner;

public class PlainJavaFileDecryptor {

    public static void main(String[] args) {
        try (Scanner scanner = new Scanner(System.in)) {
            // === TAKE USER INPUT ===
            System.out.print("Enter encrypted file path (.enc): ");
            String encryptedFilePath = scanner.nextLine();

            System.out.print("Enter encrypted key file path (.key.enc): ");
            String encryptedKeyPath = scanner.nextLine();

            System.out.print("Enter private key file path (.pem): ");
            String privateKeyPath = scanner.nextLine();

            String baseName = new File(encryptedFilePath).getName().replace(".enc", "");
            String decryptedFilePath = encryptedFilePath.replace(".enc", ".dec");

            // === LOAD AND DECRYPT AES KEY ===
            byte[] encryptedKey = Files.readAllBytes(Paths.get(encryptedKeyPath));
            PrivateKey privateKey = loadPrivateKeyFromPEM(privateKeyPath);
            byte[] aesKey = decryptAESKeyWithRSA(encryptedKey, privateKey);

            // === EXTRACT IV FROM AES KEY ===
            byte[] iv = Arrays.copyOfRange(aesKey, 0, 16);

            // === DECRYPT FILE ===
            decryptFile(encryptedFilePath, decryptedFilePath, aesKey, iv);

            System.out.println("âœ… File decrypted to: " + decryptedFilePath);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void decryptFile(String inputPath, String outputPath, byte[] aesKey, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec keySpec = new SecretKeySpec(aesKey, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);

        try (FileInputStream fis = new FileInputStream(inputPath);
             CipherInputStream cis = new CipherInputStream(fis, cipher);
             FileOutputStream fos = new FileOutputStream(outputPath)) {

            byte[] buffer = new byte[4096];
            int bytesRead;
            while ((bytesRead = cis.read(buffer)) != -1) {
                fos.write(buffer, 0, bytesRead);
            }
        }
    }

    private static PrivateKey loadPrivateKeyFromPEM(String pemFilePath) throws Exception {
        String pem = new String(Files.readAllBytes(Paths.get(pemFilePath)));
        String cleanPem = pem
                .replace("-----BEGIN PRIVATE KEY-----", "")
                .replace("-----END PRIVATE KEY-----", "")
                .replaceAll("\\s", "");
        byte[] decoded = Base64.getDecoder().decode(cleanPem);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decoded);
        return KeyFactory.getInstance("RSA").generatePrivate(keySpec);
    }

    private static byte[] decryptAESKeyWithRSA(byte[] encryptedKey, PrivateKey privateKey) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        return cipher.doFinal(encryptedKey);
    }
}

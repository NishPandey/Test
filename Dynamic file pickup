package com.ibm.sbi.lotus.cloudant.loginandreg.core;

import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.nio.file.*;
import java.security.*;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

public class FileEncryptDemo {

    public static void main(String[] args) throws Exception {
        // Get the first .csv file from Downloads
        File inputFile = getFirstCsvFromDownloads();
        System.out.println("Input file: " + inputFile.getAbsolutePath());

        String publicKeyPath = System.getProperty("user.home") + "/Downloads/public.pem";
        File publicKeyFile = new File(publicKeyPath);

        if (!publicKeyFile.exists()) {
            throw new FileNotFoundException("Public key not found at: " + publicKeyPath);
        }

        PublicKey publicKey = loadRSAPublicKey(publicKeyFile.getAbsolutePath());

        // Output encrypted file path
        File encryptedFile = new File(inputFile.getAbsolutePath() + ".enc");

        // Generate AES key and IV
        SecretKey aesKey = generateAESKey(256);
        byte[] iv = generateIV(16);

        // Write raw key and IV to disk (optional - for debug)
        Path keyFilePath = Paths.get(inputFile.getAbsolutePath() + ".key");
        Path ivFilePath = Paths.get(inputFile.getAbsolutePath() + ".iv");
        Files.write(keyFilePath, aesKey.getEncoded());
        Files.write(ivFilePath, iv);

        // Encrypt file with AES
        encryptFileWithAES(inputFile, encryptedFile, aesKey.getEncoded(), iv);
        System.out.println("AES Encrypted file: " + encryptedFile);

        // Encrypt AES key and IV with RSA public key
        byte[] encryptedKey = rsaEncrypt(publicKey, aesKey.getEncoded());
        byte[] encryptedIV = rsaEncrypt(publicKey, iv);

        Files.write(Paths.get(inputFile.getAbsolutePath() + ".key.enc"), encryptedKey);
        Files.write(Paths.get(inputFile.getAbsolutePath() + ".iv.enc"), encryptedIV);

        System.out.println("Encryption complete.");
    }

    public static File getFirstCsvFromDownloads() throws Exception {
        File downloads = new File(System.getProperty("user.home") + "/Downloads");
        File[] csvFiles = downloads.listFiles((dir, name) -> name.toLowerCase().endsWith(".csv"));
        if (csvFiles == null || csvFiles.length == 0) {
            throw new FileNotFoundException("No .csv files found in Downloads folder");
        }
        return csvFiles[0];
    }

    public static void encryptFileWithAES(File inputFile, File outputFile, byte[] key, byte[] iv) throws Exception {
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        SecretKeySpec keySpec = new SecretKeySpec(key, "AES");
        IvParameterSpec ivSpec = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, keySpec, ivSpec);

        try (FileInputStream fis = new FileInputStream(inputFile);
             CipherOutputStream cos = new CipherOutputStream(new FileOutputStream(outputFile), cipher)) {
            byte[] buffer = new byte[4096];
            int read;
            while ((read = fis.read(buffer)) != -1) {
                cos.write(buffer, 0, read);
            }
        }
    }

    public static byte[] rsaEncrypt(PublicKey publicKey, byte[] data) throws Exception {
        Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, publicKey);
        return cipher.doFinal(data);
    }

    public static PublicKey loadRSAPublicKey(String filename) throws Exception {
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        try (FileInputStream fis = new FileInputStream(filename)) {
            X509Certificate cert = (X509Certificate) cf.generateCertificate(fis);
            return cert.getPublicKey();
        }
    }

    public static SecretKey generateAESKey(int bits) throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(bits);
        return keyGen.generateKey();
    }

    public static byte[] generateIV(int length) {
        byte[] iv = new byte[length];
        new SecureRandom().nextBytes(iv);
        return iv;
    }
}
